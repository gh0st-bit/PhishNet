name: 🔐 Secure Deploy (Secrets to .env)

on:
  workflow_dispatch:
    inputs:
      run_migrations:
        description: 'Run DB migrations'
        required: false
        default: 'true'
      build_client:
        description: 'Build client'
        required: false
        default: 'true'

jobs:
  secure-deploy:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'phisnet/package-lock.json'

      - name: 📦 Install root deps
        working-directory: phisnet
        run: npm ci

      - name: 🔐 Create .env from secrets
        working-directory: phisnet
        run: |
          echo "Generating .env from GitHub Secrets..."
          : > .env
          add(){ if [ -n "$2" ]; then echo "$1=$2" >> .env; fi }
          add DATABASE_URL "${{ secrets.DATABASE_URL }}"
          add DB_HOST "${{ secrets.DB_HOST }}"
          add DB_PORT "${{ secrets.DB_PORT }}"
          add DB_NAME "${{ secrets.DB_NAME }}"
          add DB_USER "${{ secrets.DB_USER }}"
          add DB_PASSWORD "${{ secrets.DB_PASSWORD }}"
          add REDIS_URL "${{ secrets.REDIS_URL }}"
          add REDIS_HOST "${{ secrets.REDIS_HOST }}"
          add REDIS_PORT "${{ secrets.REDIS_PORT }}"
          add SESSION_SECRET "${{ secrets.SESSION_SECRET }}"
          add JWT_SECRET "${{ secrets.JWT_SECRET }}"
          add ENCRYPTION_KEY "${{ secrets.ENCRYPTION_KEY }}"
          add SMTP_HOST "${{ secrets.SMTP_HOST }}"
          add SMTP_PORT "${{ secrets.SMTP_PORT }}"
          add SMTP_USER "${{ secrets.SMTP_USER }}"
          add SMTP_PASS "${{ secrets.SMTP_PASS }}"
          add SMTP_FROM "${{ secrets.SMTP_FROM }}"
          add APP_URL "${{ secrets.APP_URL }}"
          add PORT "${{ secrets.PORT }}"
          if ! grep -q '^DATABASE_URL=' .env && grep -q '^DB_HOST=' .env; then
            H=$(grep '^DB_HOST=' .env | cut -d= -f2-)
            P=$(grep '^DB_PORT=' .env | cut -d= -f2-)
            N=$(grep '^DB_NAME=' .env | cut -d= -f2-)
            U=$(grep '^DB_USER=' .env | cut -d= -f2-)
            PW=$(grep '^DB_PASSWORD=' .env | cut -d= -f2-)
            if [ -n "$H" ] && [ -n "$P" ] && [ -n "$N" ] && [ -n "$U" ]; then
              if [ -n "$PW" ]; then
                echo "DATABASE_URL=postgresql://$U:$PW@$H:$P/$N" >> .env
              else
                echo "DATABASE_URL=postgresql://$U@$H:$P/$N" >> .env
              fi
            fi
          fi
          sed -E 's/(PASSWORD|SECRET|KEY|PASS)=.*/\1=*** /' .env

      - name: 🛠 Optional: Run migrations
        if: inputs.run_migrations == 'true'
        working-directory: phisnet
        run: |
          if grep -q '^DATABASE_URL=' .env; then
            npx drizzle-kit push:pg || echo "Drizzle push issues (continuing)"
          else
            echo "DATABASE_URL not present; skipping migrations"
          fi

      - name: 🏗 Build client
        if: inputs.build_client == 'true'
        working-directory: phisnet/client
        run: |
          if [ -f package.json ]; then
            npm run build || echo "Client build failed"
          fi

      - name: 📦 Package artifact
        working-directory: phisnet
        run: |
          tar -czf phishnet-secure-artifact.tar.gz .env server shared client/dist package.json

      - name: ⬆️ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: phishnet-secure-artifact
          path: phisnet/phishnet-secure-artifact.tar.gz

      - name: ✅ Summary
        run: echo "Secure deploy workflow complete"
